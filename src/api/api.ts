/* tslint:disable */
/* eslint-disable */
/**
 * ExamSphere API
 * This is the API for the ExamSphere system
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export const ApiHandlersAPIErrorCode = {
    ErrCodeMalformedJWT: 2100,
    ErrCodeInvalidJWT: 2101,
    ErrCodeInvalidBodyData: 2102,
    ErrCodeInvalidUsernamePass: 2103,
    ErrCodeInvalidAuth: 2104,
    ErrCodePermissionDenied: 2105,
    ErrCodeInvalidInputPass: 2106,
    ErrCodeUsernameExists: 2107,
    ErrCodeInternalServerError: 2108,
    ErrCodeInvalidFileData: 2109,
    ErrCodeInvalidPhoneNumber: 2110,
    ErrCodePhoneNumberAlreadyImported: 2111,
    ErrCodeInvalidUsername: 2112,
    ErrCodeNoPhonesDonated: 2113,
    ErrCodeAgentNotConnected: 2114,
    ErrCodeInvalidPagination: 2115,
    ErrCodeMaxContactImportLimit: 2116,
    ErrCodePhoneNumberNotFound: 2117,
    ErrCodeParameterRequired: 2118,
    ErrCodeUserBanned: 2119,
    ErrCodeLabelInfoNotFound: 2120,
    ErrCodeLabelAlreadyApplied: 2121,
    ErrCodeLabelAlreadyExistsByName: 2122,
    ErrCodeTooManyChatLabelInfo: 2123,
    ErrCodeLabelNameTooLong: 2124,
    ErrCodeLabelDescriptionTooLong: 2125,
    ErrCodeInvalidColor: 2126,
    ErrCodeLabelNotApplied: 2127,
    ErrCodeCannotDeleteBuiltInLabel: 2128,
    ErrCodeDuplicatePhoneNumber: 2129,
    ErrCodePhoneNotWorking: 2130,
    ErrCodeInvalidPmsPass: 2131,
    ErrCodeInvalidAgentId: 2132,
    ErrCodeInvalidAppSettingName: 2133,
    ErrCodeAppSettingNotFound: 2134,
    ErrCodeTextEmpty: 2135,
    ErrCodeTextTooLong: 2136,
    ErrCodeInvalidClientRId: 2137,
    ErrCodeInvalidCaptcha: 2138
} as const;

export type ApiHandlersAPIErrorCode = typeof ApiHandlersAPIErrorCode[keyof typeof ApiHandlersAPIErrorCode];


/**
 * 
 * @export
 * @interface ApiHandlersEndpointError
 */
export interface ApiHandlersEndpointError {
    /**
     * 
     * @type {ApiHandlersAPIErrorCode}
     * @memberof ApiHandlersEndpointError
     */
    'code'?: ApiHandlersAPIErrorCode;
    /**
     * 
     * @type {string}
     * @memberof ApiHandlersEndpointError
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiHandlersEndpointError
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiHandlersEndpointError
     */
    'origin'?: string;
}


/**
 * 
 * @export
 * @interface ApiHandlersEndpointResponse
 */
export interface ApiHandlersEndpointResponse {
    /**
     * 
     * @type {ApiHandlersEndpointError}
     * @memberof ApiHandlersEndpointResponse
     */
    'error'?: ApiHandlersEndpointError;
    /**
     * 
     * @type {object}
     * @memberof ApiHandlersEndpointResponse
     */
    'result'?: object;
    /**
     * 
     * @type {boolean}
     * @memberof ApiHandlersEndpointResponse
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface CaptchaHandlersGetCaptchaResult
 */
export interface CaptchaHandlersGetCaptchaResult {
    /**
     * 
     * @type {string}
     * @memberof CaptchaHandlersGetCaptchaResult
     */
    'captcha'?: string;
    /**
     * 
     * @type {string}
     * @memberof CaptchaHandlersGetCaptchaResult
     */
    'captcha_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CaptchaHandlersGetCaptchaResult
     */
    'client_r_id'?: string;
}
/**
 * 
 * @export
 * @interface CreateUserV1200Response
 */
export interface CreateUserV1200Response {
    /**
     * 
     * @type {ApiHandlersEndpointError}
     * @memberof CreateUserV1200Response
     */
    'error'?: ApiHandlersEndpointError;
    /**
     * 
     * @type {UserHandlersCreateUserResult}
     * @memberof CreateUserV1200Response
     */
    'result'?: UserHandlersCreateUserResult;
    /**
     * 
     * @type {boolean}
     * @memberof CreateUserV1200Response
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface GenerateCaptchaV1200Response
 */
export interface GenerateCaptchaV1200Response {
    /**
     * 
     * @type {ApiHandlersEndpointError}
     * @memberof GenerateCaptchaV1200Response
     */
    'error'?: ApiHandlersEndpointError;
    /**
     * 
     * @type {CaptchaHandlersGetCaptchaResult}
     * @memberof GenerateCaptchaV1200Response
     */
    'result'?: CaptchaHandlersGetCaptchaResult;
    /**
     * 
     * @type {boolean}
     * @memberof GenerateCaptchaV1200Response
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface GetMeV1200Response
 */
export interface GetMeV1200Response {
    /**
     * 
     * @type {ApiHandlersEndpointError}
     * @memberof GetMeV1200Response
     */
    'error'?: ApiHandlersEndpointError;
    /**
     * 
     * @type {UserHandlersMeResult}
     * @memberof GetMeV1200Response
     */
    'result'?: UserHandlersMeResult;
    /**
     * 
     * @type {boolean}
     * @memberof GetMeV1200Response
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface LoginV1200Response
 */
export interface LoginV1200Response {
    /**
     * 
     * @type {ApiHandlersEndpointError}
     * @memberof LoginV1200Response
     */
    'error'?: ApiHandlersEndpointError;
    /**
     * 
     * @type {UserHandlersLoginResult}
     * @memberof LoginV1200Response
     */
    'result'?: UserHandlersLoginResult;
    /**
     * 
     * @type {boolean}
     * @memberof LoginV1200Response
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface ReAuthV1200Response
 */
export interface ReAuthV1200Response {
    /**
     * 
     * @type {ApiHandlersEndpointError}
     * @memberof ReAuthV1200Response
     */
    'error'?: ApiHandlersEndpointError;
    /**
     * 
     * @type {UserHandlersAuthResult}
     * @memberof ReAuthV1200Response
     */
    'result'?: UserHandlersAuthResult;
    /**
     * 
     * @type {boolean}
     * @memberof ReAuthV1200Response
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface UserHandlersAuthResult
 */
export interface UserHandlersAuthResult {
    /**
     * 
     * @type {string}
     * @memberof UserHandlersAuthResult
     */
    'access_token'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserHandlersAuthResult
     */
    'expiration'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersAuthResult
     */
    'full_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersAuthResult
     */
    'refresh_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersAuthResult
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersAuthResult
     */
    'user_id'?: string;
}
/**
 * 
 * @export
 * @interface UserHandlersCreateUserData
 */
export interface UserHandlersCreateUserData {
    /**
     * 
     * @type {string}
     * @memberof UserHandlersCreateUserData
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersCreateUserData
     */
    'full_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersCreateUserData
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersCreateUserData
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersCreateUserData
     */
    'user_id'?: string;
}
/**
 * 
 * @export
 * @interface UserHandlersCreateUserResult
 */
export interface UserHandlersCreateUserResult {
    /**
     * 
     * @type {string}
     * @memberof UserHandlersCreateUserResult
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersCreateUserResult
     */
    'full_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersCreateUserResult
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersCreateUserResult
     */
    'user_id'?: string;
}
/**
 * 
 * @export
 * @interface UserHandlersLoginData
 */
export interface UserHandlersLoginData {
    /**
     * 
     * @type {string}
     * @memberof UserHandlersLoginData
     */
    'captcha_answer'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersLoginData
     */
    'captcha_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersLoginData
     */
    'client_rid'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersLoginData
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersLoginData
     */
    'user_id'?: string;
}
/**
 * 
 * @export
 * @interface UserHandlersLoginResult
 */
export interface UserHandlersLoginResult {
    /**
     * 
     * @type {string}
     * @memberof UserHandlersLoginResult
     */
    'access_token'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserHandlersLoginResult
     */
    'expiration'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersLoginResult
     */
    'full_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersLoginResult
     */
    'refresh_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersLoginResult
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersLoginResult
     */
    'user_id'?: string;
}
/**
 * 
 * @export
 * @interface UserHandlersMeResult
 */
export interface UserHandlersMeResult {
    /**
     * 
     * @type {string}
     * @memberof UserHandlersMeResult
     */
    'full_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersMeResult
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserHandlersMeResult
     */
    'user_id'?: string;
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Allows a user to create a new user
         * @summary Create a new user
         * @param {string} authorization Authorization token
         * @param {UserHandlersCreateUserData} createUserData Create user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserV1: async (authorization: string, createUserData: UserHandlersCreateUserData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('createUserV1', 'authorization', authorization)
            // verify required parameter 'createUserData' is not null or undefined
            assertParamExists('createUserV1', 'createUserData', createUserData)
            const localVarPath = `/api/v1/user/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a client (with Client-R-ID) to generate a captcha
         * @summary Get a captcha
         * @param {string} clientRID Client-R-ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateCaptchaV1: async (clientRID: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientRID' is not null or undefined
            assertParamExists('generateCaptchaV1', 'clientRID', clientRID)
            const localVarPath = `/api/v1/captcha/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientRID != null) {
                localVarHeaderParameter['Client-R-ID'] = String(clientRID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a user to get their own information
         * @summary Get the user\'s information
         * @param {string} authorization Authorization token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeV1: async (authorization: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getMeV1', 'authorization', authorization)
            const localVarPath = `/api/v1/user/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a user to login to the system and obtain access/refresh tokens
         * @summary Login to the system
         * @param {UserHandlersLoginData} loginData Login data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginV1: async (loginData: UserHandlersLoginData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginData' is not null or undefined
            assertParamExists('loginV1', 'loginData', loginData)
            const localVarPath = `/api/v1/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a user to refresh their access token
         * @summary Refresh the access token
         * @param {string} authorization Refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reAuthV1: async (authorization: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('reAuthV1', 'authorization', authorization)
            const localVarPath = `/api/v1/user/reAuth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Allows a user to create a new user
         * @summary Create a new user
         * @param {string} authorization Authorization token
         * @param {UserHandlersCreateUserData} createUserData Create user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserV1(authorization: string, createUserData: UserHandlersCreateUserData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserV1200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserV1(authorization, createUserData, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.createUserV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allows a client (with Client-R-ID) to generate a captcha
         * @summary Get a captcha
         * @param {string} clientRID Client-R-ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateCaptchaV1(clientRID: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateCaptchaV1200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateCaptchaV1(clientRID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.generateCaptchaV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allows a user to get their own information
         * @summary Get the user\'s information
         * @param {string} authorization Authorization token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeV1(authorization: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMeV1200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeV1(authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getMeV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allows a user to login to the system and obtain access/refresh tokens
         * @summary Login to the system
         * @param {UserHandlersLoginData} loginData Login data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginV1(loginData: UserHandlersLoginData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginV1200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginV1(loginData, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.loginV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allows a user to refresh their access token
         * @summary Refresh the access token
         * @param {string} authorization Refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reAuthV1(authorization: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReAuthV1200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reAuthV1(authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.reAuthV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Allows a user to create a new user
         * @summary Create a new user
         * @param {string} authorization Authorization token
         * @param {UserHandlersCreateUserData} createUserData Create user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserV1(authorization: string, createUserData: UserHandlersCreateUserData, options?: any): AxiosPromise<CreateUserV1200Response> {
            return localVarFp.createUserV1(authorization, createUserData, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a client (with Client-R-ID) to generate a captcha
         * @summary Get a captcha
         * @param {string} clientRID Client-R-ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateCaptchaV1(clientRID: string, options?: any): AxiosPromise<GenerateCaptchaV1200Response> {
            return localVarFp.generateCaptchaV1(clientRID, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a user to get their own information
         * @summary Get the user\'s information
         * @param {string} authorization Authorization token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeV1(authorization: string, options?: any): AxiosPromise<GetMeV1200Response> {
            return localVarFp.getMeV1(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a user to login to the system and obtain access/refresh tokens
         * @summary Login to the system
         * @param {UserHandlersLoginData} loginData Login data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginV1(loginData: UserHandlersLoginData, options?: any): AxiosPromise<LoginV1200Response> {
            return localVarFp.loginV1(loginData, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a user to refresh their access token
         * @summary Refresh the access token
         * @param {string} authorization Refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reAuthV1(authorization: string, options?: any): AxiosPromise<ReAuthV1200Response> {
            return localVarFp.reAuthV1(authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Allows a user to create a new user
     * @summary Create a new user
     * @param {string} authorization Authorization token
     * @param {UserHandlersCreateUserData} createUserData Create user data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUserV1(authorization: string, createUserData: UserHandlersCreateUserData, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).createUserV1(authorization, createUserData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows a client (with Client-R-ID) to generate a captcha
     * @summary Get a captcha
     * @param {string} clientRID Client-R-ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public generateCaptchaV1(clientRID: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).generateCaptchaV1(clientRID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows a user to get their own information
     * @summary Get the user\'s information
     * @param {string} authorization Authorization token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getMeV1(authorization: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getMeV1(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows a user to login to the system and obtain access/refresh tokens
     * @summary Login to the system
     * @param {UserHandlersLoginData} loginData Login data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public loginV1(loginData: UserHandlersLoginData, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).loginV1(loginData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows a user to refresh their access token
     * @summary Refresh the access token
     * @param {string} authorization Refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public reAuthV1(authorization: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).reAuthV1(authorization, options).then((request) => request(this.axios, this.basePath));
    }
}



